services:
  frontend:
    build:
      context: ./frontend
      target: development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://backend:8000}
    depends_on:
      - backend
    command: npm run dev

  backend:
    build:
      context: ./backend
      target: development
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DB_USER=${DB_USER:-dojo_admin}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME:-defidojo}
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DATABASE_URL=${DATABASE_URL}
      - PYTHONPATH=/app
    command: python src/main.py
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: ${DB_USER:-dojo_admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-defidojo}
      POSTGRES_HOST_AUTH_METHOD: trust
    command:
      - "postgres"
      - "-c"
      - "password_encryption=md5"
    ports:
      - "5433:5432" # Local database: localhost:5432 -> Docker database: localhost:5433
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dojo_admin -d defidojo"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  migration:
    build:
      context: ./backend
      target: development
    volumes:
      - ./backend:/app
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DB_USER=${DB_USER:-dojo_admin}
      - DB_PASSWORD=Dj8#mK9$pL2@vN4x
      - DB_NAME=${DB_NAME:-defidojo}
      - DB_HOST=postgres
      - DB_PORT=5432
      - PYTHONPATH=/app
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "flask db upgrade"

volumes:
  postgres_data:
    driver: local  # Simplified volume configuration