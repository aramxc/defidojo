services:
  frontend:
    build:
      context: ./frontend
      target: development
    volumes:
      - ./frontend:/app
      - next-cache:/app/.next
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - WATCHPACK_POLLING=true
      - NEXT_TELEMETRY_DISABLED=1
      - FORCE_PRECOMPILE=true
      - BROWSER=true
      - NODE_VERSION=22
    command: >
      sh -c "
        npm install &&
        echo 'Starting Next.js development server...' &&
        npm run dev -- -H 0.0.0.0"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    stdin_open: true
    tty: true
    depends_on:
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  backend:
    build:
      context: ./backend
      target: development
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
      - ENVIRONMENT=development
    command: python src/main.py
    depends_on:
      postgres:
        condition: service_healthy
      hardhat:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  postgres:
    image: postgres:14
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    command:
      - "postgres"
      - "-c"
      - "password_encryption=scram-sha-256"
    ports:
      - "5433:5432" 
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  migration:
    build:
      context: ./backend
      target: development
    volumes:
      - ./backend:/app
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
      - ENVIRONMENT=development
      - FLASK_APP=src.main:create_app
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        pip install -r requirements.txt &&
        echo 'Running database migrations...' &&
        flask db upgrade"

  seed:
    build:
      context: ./backend
      target: development
    volumes:
      - ./backend:/app
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
    depends_on:
      migration:
        condition: service_completed_successfully
    command: python scripts/seed.py docker

  hardhat:
    build:
      context: ./contracts
      dockerfile: Dockerfile
    ports:
      - "8545:8545"
    volumes:
      - ./contracts:/app
      - ./frontend/src/web3/contracts/abis:/app/frontend-abis
    command: >
      sh -c "
        npm install &&
        npx hardhat compile &&
        npx ts-node scripts/copy-artifacts.ts &&
        npx hardhat node &
        sleep 10 &&
        npx hardhat run scripts/deploy.ts --network localhost &&
        while true; do sleep 1; done"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8545"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

volumes:
  postgres_data:
    driver: local
  next-cache:
    driver: local
